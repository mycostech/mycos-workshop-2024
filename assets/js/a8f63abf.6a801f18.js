"use strict";(self.webpackChunkreact_cmu_docs_2024=self.webpackChunkreact_cmu_docs_2024||[]).push([[7600],{7335:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var c=r(4848),a=r(8453);const s={sidebar_position:4},t="Basic Typescript",l={id:"basic-typescript",title:"Basic Typescript",description:"Before we go to far in React, we should know about typescript especially Object and managing Array",source:"@site/docs/basic-typescript.md",sourceDirName:".",slug:"/basic-typescript",permalink:"/mycos-workshop-2024/docs/basic-typescript",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"React Props",permalink:"/mycos-workshop-2024/docs/first-props"},next:{title:"More about JSX",permalink:"/mycos-workshop-2024/docs/jsx"}},o={},i=[{value:"Declare Variable",id:"declare-variable",level:2},{value:"Naming",id:"naming",level:3},{value:"Trip use IDE/Text editor extension",id:"trip-use-idetext-editor-extension",level:4},{value:"Normal Type",id:"normal-type",level:2},{value:"Object Type",id:"object-type",level:3},{value:"Typescript Object Type",id:"typescript-object-type",level:3},{value:"Optional type",id:"optional-type",level:3},{value:"Any Type",id:"any-type",level:3},{value:"More of Typescript",id:"more-of-typescript",level:3},{value:"Destructuring Object",id:"destructuring-object",level:2},{value:"Spread Syntax",id:"spread-syntax",level:2},{value:"Spread Array",id:"spread-array",level:3},{value:"Other ability of Spread",id:"other-ability-of-spread",level:3},{value:"Manage New Array",id:"manage-new-array",level:2},{value:"map",id:"map",level:3},{value:"filter",id:"filter",level:3},{value:"reduce",id:"reduce",level:3},{value:"Asynchronous Function",id:"asynchronous-function",level:2},{value:"Promise",id:"promise",level:3},{value:"Handle Promise",id:"handle-promise",level:3},{value:"Concurrent",id:"concurrent",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"basic-typescript",children:"Basic Typescript"})}),"\n",(0,c.jsx)(n.p,{children:"Before we go to far in React, we should know about typescript especially Object and managing Array"}),"\n",(0,c.jsx)(n.p,{children:"Brief: Simulate strong type interpreter to JavaScript, reduce Developer pain (or increase)"}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.a,{href:"https://www.typescriptlang.org/play/",children:"https://www.typescriptlang.org/play/"})," to easy practice."]}),"\n",(0,c.jsx)(n.h2,{id:"declare-variable",children:"Declare Variable"}),"\n",(0,c.jsxs)(n.p,{children:["first ",(0,c.jsx)(n.code,{children:"const"}),", declare once for constant and it never changed."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-jsx",children:"const oneRem = '16px'\n\n// typescript or non assign\nconst oneRem: string = '16px'\n"})}),"\n",(0,c.jsxs)(n.p,{children:["and ",(0,c.jsx)(n.code,{children:"let"})," declare to be able to change later"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"let age;\n\nage = 25;\n\nage = 30;\n\n// typescript \n\nlet age: number;\n\nage = 25\n\nage = 30\n"})}),"\n",(0,c.jsx)(n.h3,{id:"naming",children:"Naming"}),"\n",(0,c.jsx)(n.p,{children:"how to naming but it can be changed follow team culture."}),"\n",(0,c.jsxs)(n.p,{children:["Declare Component, Declare Interface/Type, Global Variable File use ",(0,c.jsx)(n.code,{children:"PascalCase"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"const CalFuncCom = () => {}\nexport CalFuncCom\n\n\nconst OneRem = '16px';\nexport OneRem\n\ninterface YourSelf {\n    name: string;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["function name, variable inside function / component block, use ",(0,c.jsx)(n.code,{children:"camelCase"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-jsx",children:"const Component = () => {\n    const myAge: number = 25;\n\n    let firstName: string = 'Nook';\n}\n"})}),"\n",(0,c.jsx)(n.h4,{id:"trip-use-idetext-editor-extension",children:"Trip use IDE/Text editor extension"}),"\n",(0,c.jsxs)(n.p,{children:["In VS code, use ",(0,c.jsx)(n.code,{children:"Prettier"}),", ",(0,c.jsx)(n.code,{children:"EditorConfig"})," extension"]}),"\n",(0,c.jsx)(n.h2,{id:"normal-type",children:"Normal Type"}),"\n",(0,c.jsx)(n.p,{children:"like javascript typescript have normal type with"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"const isFinished: boolean = false\n\nconst myName: string = 'Nook'\n\nconst myAge: number = 29.0001\n"})}),"\n",(0,c.jsx)(n.h3,{id:"object-type",children:"Object Type"}),"\n",(0,c.jsx)(n.p,{children:"in javascript, both array and object is object type"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"\nconst mySelf = { name: 'Nook' }\nconsole.log(typeof mySelf)\n// object\n\nconst arr = []\nconsole.log(typeof mySelf)\n// object\n"})}),"\n",(0,c.jsx)(n.p,{children:"how to check is array?"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const arr = []\nArray.isArray(arr)\n// true\n"})}),"\n",(0,c.jsx)(n.h3,{id:"typescript-object-type",children:"Typescript Object Type"}),"\n",(0,c.jsxs)(n.p,{children:["Typescript offer two API, ",(0,c.jsx)(n.code,{children:"interface"})," and ",(0,c.jsx)(n.code,{children:"type"}),", in basic both can be use\nthe different is syntax also ",(0,c.jsx)(n.code,{children:"interface"})," can inherit like OOP, ",(0,c.jsx)(n.code,{children:"type"})," can generic programable(advanced)"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"interface YourSelf {\n    name: string;\n    age: number;\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"optional-type",children:"Optional type"}),"\n",(0,c.jsxs)(n.p,{children:["Above example all it required type, if we want some field optionally add ",(0,c.jsx)(n.code,{children:"?"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"    let age?: number;\n\n    type YourSelf = {\n    name: string;\n    age?: number;\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"any-type",children:"Any Type"}),"\n",(0,c.jsx)(n.p,{children:"We don't know how to deal with the type, put it any but not recommend for entry app"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:" let donKnow: any;\n"})}),"\n",(0,c.jsx)(n.h3,{id:"more-of-typescript",children:"More of Typescript"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Generic ",(0,c.jsx)(n.code,{children:"<T>"})]}),"\n",(0,c.jsx)(n.li,{children:"unknown, never"}),"\n",(0,c.jsx)(n.li,{children:"Enum"}),"\n",(0,c.jsx)(n.li,{children:"helper, Partial, Required,"}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"destructuring-object",children:"Destructuring Object"}),"\n",(0,c.jsx)(n.p,{children:"Expression which unpack value from object also declare variable with the same name"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:' const nookHooMan: YourSelf = {\n    name: "Nook",\n    age: 30,\n }\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Unpack name property also declare variable ",(0,c.jsx)(n.code,{children:"name"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"// like const name = nookHooMan.name\nconst { name } = nookHooMan\nconsole.log(name)\n"})}),"\n",(0,c.jsx)(n.p,{children:"Unpack name property but want to change name property to hooManName"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"// like const hooManName = nookHooMan.name\nconst { name: hooManName } = nookHooMan\nconsole.log(hooManName)\n\nconsole.log(name) // should got a error\n"})}),"\n",(0,c.jsx)(n.h2,{id:"spread-syntax",children:"Spread Syntax"}),"\n",(0,c.jsx)(n.p,{children:"Guarantee return new object, fix pass by ref."}),"\n",(0,c.jsx)(n.p,{children:"What is the problem?"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const aInit = { name: 'Nook' }\n\nconst bCopy = a;\n\nbCopy.name = 'Robert'\n\nconsole.log(aInit.name)\n// 'Robert'\nconsole.log(bCopy.name)\n// 'Robert'\n"})}),"\n",(0,c.jsx)(n.p,{children:"How to prevent"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const aInit = { name: 'Nook', age: 29 }\n\n// or called clone deep\nconst bCopy = {...aInit}\n\nbCopy.name = 'Robert'\n\nconsole.log(aInit.name)\n// 'Nook'\nconsole.log(bCopy.name)\n// 'Robert'\n"})}),"\n",(0,c.jsx)(n.p,{children:"Example how to clone and add isFinished field"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const aInit = { name: 'Nook', age: 29 }\n\nconst bCopy = {...aInit, isFInished: true }\n"})}),"\n",(0,c.jsx)(n.h3,{id:"spread-array",children:"Spread Array"}),"\n",(0,c.jsx)(n.p,{children:"Array can use spread too."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const numArr = [1, 2, 3, 4, 5]\n\nconst cloneArr = [...numArr];\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.em,{children:"But it cannot spread the wrong type"})}),"\n",(0,c.jsx)(n.h3,{id:"other-ability-of-spread",children:"Other ability of Spread"}),"\n",(0,c.jsx)(n.p,{children:"We can remove property of object."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const mySelf = { name: 'Nook', age: 29, isFinished: false }\n\n// We extract age from mySelf and assign to age with the same name, other field declare with `rest`\nconst { age, ...rest } = mySelf\nconsole.log(age)\n// 29\nconsole.log(rest)\n// { name: 'Nook', isFinished: false }\n\n// Another example if we want change age variable and get age value\nconst { age: eAge, ...other } = mySelf\nconsole.log(eAge)\n//29\n\nconsole.log(age)\n// error\n\nconst removeAge = { ...other }\n"})}),"\n",(0,c.jsx)(n.h2,{id:"manage-new-array",children:"Manage New Array"}),"\n",(0,c.jsxs)(n.p,{children:["Guarantee return new array with ",(0,c.jsx)(n.code,{children:"map"}),", ",(0,c.jsx)(n.code,{children:"filter"}),", ",(0,c.jsx)(n.code,{children:"reduce"})]}),"\n",(0,c.jsx)(n.p,{children:"example object"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:'\ntype TProduct = {\n    price: number;\n    name: string;\n    isIncludeTax: boolean;\n}\n\nconst products: TProduct[] = [\n    { price: 45.99, name: "Coffee Maker", isIncludeTax: false },\n    { price: 120.00, name: "Bluetooth Speaker", isIncludeTax: true },\n    { price: 75.50, name: "Electric Kettle", isIncludeTax: false },\n    { price: 22.25, name: "Desk Lamp", isIncludeTax: true },\n    { price: 15.00, name: "Notebook Set", isIncludeTax: false }\n];\n\n'})}),"\n",(0,c.jsx)(n.h3,{id:"map",children:"map"}),"\n",(0,c.jsx)(n.p,{children:"transform shape of each item in array"}),"\n",(0,c.jsx)(n.p,{children:"syntax"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const newArray = array.map(callbackFunction(currentValue, index?, array?));\n\n// or \n\nconst array.map((eachArr, index) => {\n\n    return eachArr\n})\n\n"})}),"\n",(0,c.jsx)(n.p,{children:"Example increase price * 1.5"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"const cbProductIncreasePrice = (product) => {\n\n    return {\n        ...product,\n        price: product.price * 1.5\n    }\n}\n\nconst newProducts = products.map(cbProductIncreasePrice)\n\n// or\n\nconst newProducts = products.map(product => {\n\n    return {\n        ...product,\n        price: product.price * 1.5\n    }\n})\n"})}),"\n",(0,c.jsx)(n.h3,{id:"filter",children:"filter"}),"\n",(0,c.jsx)(n.p,{children:"filter item then return a new array with filter condition truly"}),"\n",(0,c.jsx)(n.p,{children:"example filter only isIncludeTax is false"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"// one statement we can ignore curry bracket, it auto return\n// since filter will filtering only true condition so we add ! to false !false === true\nconst notIncludeTaxProducts = products.filter(product => !product.isIncludeTax)\n\n// or \nconst notIncludeTaxProducts = products.filter(product => {\n    return !product.isIncludeTax\n})\n"})}),"\n",(0,c.jsx)(n.h3,{id:"reduce",children:"reduce"}),"\n",(0,c.jsx)(n.p,{children:"Want to aggregate array to another shape, or one value"}),"\n",(0,c.jsx)(n.p,{children:"syntax"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"\narray.reduce((agg, curItem) => {\n    return agg + curItem;\n}, 0); // Initial value\n\narray.reduce((mergeObj, curField) => {\n    return {\n        ...mergeObj,\n        curField: curField\n    };\n}, {}); // Initial value\n\n// can condition\narray.reduce((mergeObj, curField) => {\n\n    if (some true)\n    return {\n        ...mergeObj,\n        curField: curField\n    };\n\n    else do nothing\n    return mergeObj\n\n}, {}); // Initial value\n\n"})}),"\n",(0,c.jsx)(n.p,{children:"example total of this products"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const totalCost = products.reduce((total, curProduct) => {\n    \n    return total + curProduct.price\n}, 0) //init total with 0\n"})}),"\n",(0,c.jsx)(n.p,{children:"total of product's tax include"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const totalCost = products.reduce((total, curProduct) => {\n    if (curProduct.isIncludeTax) {\n        return total + curProduct.price\n    }\n\n    return total    \n}, 0) //init total with 0\n"})}),"\n",(0,c.jsx)(n.p,{children:"total of product if tax exclude add 7%"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const taxRate = 0.07; // 7% tax rate\n\n// one line condition if true use statement after ? otherwise use statement after :\nconst totalCost = products.reduce((total, curProduct) => {\n    const priceIncludingTax = product.isIncludeTax ? product.price : product.price * (1 + taxRate);\n    return total + priceIncludingTax\n}, 0) //init total with 0\n\n// Or normal statement if\nconst totalCost = products.reduce((total, curProduct) => {\n    if (product.isIncludeTax) {\n        return total + product.price\n    }\n    return total + product.price * (1 + taxRate);\n}, 0) //init total with 0\n\n"})}),"\n",(0,c.jsx)(n.h2,{id:"asynchronous-function",children:"Asynchronous Function"}),"\n",(0,c.jsx)(n.p,{children:"Code will working with non blocking previous line"}),"\n",(0,c.jsx)(n.h3,{id:"promise",children:"Promise"}),"\n",(0,c.jsx)(n.p,{children:"Promise type is asynchronous operation will return Success or Rejected"}),"\n",(0,c.jsx)(n.p,{children:"example"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:'const myPromise = new Promise((resolve, reject) => {\n    // Asynchronous operation code here\n    const success = performSomeOperation();\n    if (success) {\n        resolve("Operation successful");\n    } else {\n        reject("Operation failed");\n    }\n});\n\n'})}),"\n",(0,c.jsx)(n.h3,{id:"handle-promise",children:"Handle Promise"}),"\n",(0,c.jsx)(n.p,{children:"we can handle two promise two method"}),"\n",(0,c.jsx)(n.p,{children:"example sleep"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"function sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["First example call sleep with ",(0,c.jsx)(n.code,{children:"then"})," when success, and ",(0,c.jsx)(n.code,{children:"catch"})," when reject (this is no reject)"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"\nsleep(5000)\n  .then(() => console.log('after 5 second'))\n"})}),"\n",(0,c.jsx)(n.p,{children:"Second, call sleep with await / async"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const testSleep = async () => {\n    await sleep(5000)\n    console.log('after 5 second')\n}\n\n// Or\n\nasync function testSleep () {\n    await sleep(5000)\n    console.log('after 5 second')\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"concurrent",children:"Concurrent"}),"\n",(0,c.jsx)(n.p,{children:"Example of Concurrent"}),"\n",(0,c.jsx)(n.p,{children:"First, then style"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"    const testConcur = () => {\n        sleep(3000)\n            .then(() => console.log('Second'))\n        \n        sleep(2000)\n            .then(() => console.log('Third'))\n\n        console.log('First')\n    }\n    testConcur()\n    // First\n    // Third\n    // Second\n"})}),"\n",(0,c.jsx)(n.p,{children:"Second, async/await style"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"    const testConcur = async () => {\n        await sleep(3000)\n            console.log('Second')\n        \n        await sleep(2000)\n            console.log('Third')\n\n        console.log('First')\n    }\n    testConcur()\n    // Second\n    // Third\n    // First\n"})}),"\n",(0,c.jsx)(n.p,{children:"Call API Example"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"const fakeCallApi = async (isValid: boolean) => {\n    await sleep(5000)\n    return new Promise((resolve, reject) => {\n        if(isValid) {\n            resolve({isSuccess: true, name: 'NOOK'})\n        } else {\n            reject({message: 'opp error'})\n        }\n    });\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["First, ",(0,c.jsx)(n.code,{children:"then"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"const testCallApi = () => {\n    fakeCallApi(true)\n        .then((res) => console.log(res)) // res is {isSuccess: true, name: 'NOOK'}\n\n    \n    fakeCallApi(false)\n        .then((res) => {}) // no call then since it reject\n        .catch(err => console.log(err)) // {message: 'opp error'}\n        .finally(() => console.log('last step')) // Whatever success or fail, this will call lasts\n}\ntestCallApi()\n"})}),"\n",(0,c.jsx)(n.p,{children:"Second, async / await"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"const testCallApi = async () => {\n    try {\n       const res = await fakeCallApi(true)\n       console.log(res)\n    } catch (err: any) {\n        console.log(err)\n    } finally {\n        console.log('last step')\n    }\n}\ntestCallApi()\n"})}),"\n",(0,c.jsx)(n.p,{children:"Which async?"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"AJAX (call API)"}),"\n",(0,c.jsx)(n.li,{children:"upload file"}),"\n",(0,c.jsx)(n.li,{children:"read file"}),"\n",(0,c.jsx)(n.li,{children:"some DOM Event"}),"\n",(0,c.jsx)(n.li,{children:"setTimeout function"}),"\n",(0,c.jsx)(n.li,{children:"etc"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var c=r(6540);const a={},s=c.createContext(a);function t(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);